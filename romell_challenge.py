#############################################
#                                           #
#   WindRiver Coding Challenge              #
#   Author: Romell Aguirre Gomez            #
#                                           #
#############################################


# Importing modules
import flask, base64
from flask import request, jsonify

app = flask.Flask(__name__)
app.config["DEBUG"] = True


# Exception catching - Error handling for bad endpoint requests or json invalid format
@app.errorhandler(Exception) 
def handle_error(error):
    return jsonify({"Input": "", "Output": "", "Status": "error", "Message": "Wrong Endpoint or invalid JSON format, try again", "Response Code": 400})


# Web Service Home Page - Provide a simple Welcome Message
@app.route('/', methods=['GET'])
def home():
    return "<h1>Romell's WindRiver Application</h1><h2>Please use the following endpoints: /api/encrypt, /api/decrypt, /api/health</h2>"


# Encryption method - Take json value as input and encrypt it using the encode64 method
@app.route("/api/encrypt", methods=["POST"])
def encrypt():
    if request.is_json:
        data = request.json
        for key, value in data.items():
            if not value:
                return jsonify({"Input": value, "Output": "", "Status": "error", "Message": "Value is empty, cannot encrypt it", "Response Code": 400})
            else:
                # encode64 based strategy
                encoded_data = base64.b64encode(value)
                return jsonify({"Input": value, "Output": encoded_data, "Status": "success", "Message": "Encryption Successful", "Response Code": 200})
    else:
        return jsonify({"Input": "", "Output": "", "Status": "error", "Message": "Json format invalid, try again", "Response Code": 400})
    

# Decryption method - Take json value encrypted generated by encrypt method as input and decrypt it using the encode64 method
@app.route("/api/decrypt", methods=["POST"])
def decrypt():
    if request.is_json:
        data = request.json
        for key, value in data.items():
            if not value:
                return jsonify({"Input": value, "Output": "", "Status": "error", "Message": "Value is empty, cannot decrypt it", "Response Code": 400})
            else:
                # decode64 based strategy 
                decoded_data = base64.b64decode(value)
                return jsonify({"Input": value, "Output": decoded_data, "Status": "success", "Message": "Decryption Successful", "Response Code": 200})
    else:
        return jsonify({"Input": "", "Output": "", "Status": "error", "Message": "Json format invalid, try again", "Response Code": 400})


# Health method: check the application health
@app.route('/api/health', methods=['GET'])
def health():
    return "<h1>Application is Up and Running!</h1><h2>Please use the following endpoints: /encrypt, /decrypt, /health</h2>"


# Launch the application on locahost, for publishing into a container change to app.run(host="0.0.0.0", port=5000)
app.run()
app.run(host="0.0.0.0", port=5000)